---
- name: container | "Create the container user's group | {{ podman_pod_container.name }}"
  ansible.builtin.user:
    name: "{{ podman_pod_container.name }}"
    system: true
    state: present
  become: true

- name: container | "Create the container user | {{ podman_pod_container.name }}"
  ansible.builtin.user:
    name: "{{ podman_pod_container.name }}"
    group: "{{ podman_pod_container.name }}"
    system: true
    state: present
    password_lock: true
    password: '!' # Sets the password as a locked password
    generate_ssh_key: true
    ssh_key_file: .ssh/id_ed25519
    ssh_key_type: ed25519
  register: container_user
  become: true

- name: container | "Ensure the container host can ssh into the container | {{ podman_pod_container.name }}"
  ansible.posix.authorized_key:
    user: "{{ container_user.name }}"
    state: present
    key: "{{ container_user.ssh_public_key }}"
  become: true

- name: container | "Create the container's systemd service file | {{ podman_pod_container.name }}"
  ansible.builtin.template:
    src: podman.service.j2
    dest: /etc/systemd/system/{{ podman_pod_container.name }}_podman.service
    owner: root
    group: root
    mode: '0600'
  register: podman_pod_container_systemd_unit_file
  become: true

- name: container | "Create the container's systemd timer file | {{ podman_pod_container.name }}"
  ansible.builtin.template:
    src: podman.timer.j2
    dest: "/etc/systemd/system/{{ podman_pod_container.name }}_podman.timer"
    owner: root
    group: root
    mode: '0644'
  when: "'timer' in podman_pod_container"
  register: podman_pod_container_systemd_timer_file
  become: true

- name: container | Reload the Systemd Daemons
  ansible.builtin.systemd_service:
    daemon_reload: true
  become: true
  when:
    - podman_pod_container_systemd_unit_file.changed or podman_pod_container_systemd_timer_file.changed or (container_image is defined and container_image.changed)

- name: container | Restart the container if there is no timer
  when:
    - "'timer' not in podman_pod_container"
  block:
    - name: container | Set the container to start at boot
      ansible.builtin.systemd_service:
        name: "{{ podman_pod_container.name }}_podman.service"
        enabled: "{{ podman_pod_container.start_on_boot | default(true) }}"
      become: true

    - name: container | Restart the container
      ansible.builtin.systemd_service:
        name: "{{ podman_pod_container.name }}_podman.service"
        enabled: "{{ podman_pod_container.start_on_boot | default(true) }}"
        daemon_reload: true
      become: true
      when: podman_pod_container_systemd_unit_file.changed or (container_image is defined and container_image.changed)

- name: container | Set the timer to start at boot
  ansible.builtin.systemd_service:
    name: "{{ podman_pod_container.name }}_podman.timer"
    state: started
    enabled: "{{ podman_pod_container.start_on_boot | default(true) }}"
  become: true
  when:
    - "'timer' in podman_pod_container"
